
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated.fr.ul.miashs.expression;


import fr.ul.miashs.compil.arbre.*;
import fr.ul.miashs.compil.arbre.exemples.*;
import fr.ul.miage.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {
  public Prog progNoeud = new Prog();
  public TDS tds = new TDS();

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\016\011" +
    "\000\002\016\013\000\002\016\015\000\002\014\011\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\003\000\002\023\003\000\002" +
    "\024\006\000\002\024\005\000\002\021\011\000\002\025" +
    "\003\000\002\025\007\000\002\026\012\000\002\012\004" +
    "\000\002\012\006\000\002\012\002\000\002\007\007\000" +
    "\002\011\007\000\002\006\005\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\014\006\016\004\001\002\000\004\015" +
    "\100\001\002\000\010\002\000\014\006\016\004\001\002" +
    "\000\006\005\013\015\014\001\002\000\004\002\012\001" +
    "\002\000\010\002\uffff\014\006\016\004\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\004\015" +
    "\024\001\002\000\004\017\015\001\002\000\004\005\016" +
    "\001\002\000\004\021\017\001\002\000\004\005\020\001" +
    "\002\000\004\041\021\001\002\000\004\005\022\001\002" +
    "\000\004\020\023\001\002\000\010\002\ufffb\014\ufffb\016" +
    "\ufffb\001\002\000\004\005\025\001\002\000\004\017\026" +
    "\001\002\000\004\005\027\001\002\000\006\020\031\021" +
    "\030\001\002\000\004\005\032\001\002\000\010\002\ufffc" +
    "\014\ufffc\016\ufffc\001\002\000\012\010\042\017\035\035" +
    "\037\041\034\001\002\000\016\005\ufff1\006\ufff1\007\073" +
    "\011\ufff1\031\074\032\ufff1\001\002\000\016\005\uffed\006" +
    "\uffed\007\uffed\011\uffed\031\uffed\032\uffed\001\002\000\020" +
    "\005\uffec\006\uffec\007\uffec\010\062\011\uffec\031\uffec\032" +
    "\uffec\001\002\000\016\005\uffe9\006\uffe9\007\uffe9\011\uffe9" +
    "\031\uffe9\032\uffe9\001\002\000\004\005\054\001\002\000" +
    "\016\005\uffee\006\uffee\007\uffee\011\uffee\031\uffee\032\uffee" +
    "\001\002\000\010\005\052\006\047\032\046\001\002\000" +
    "\012\010\042\017\035\035\037\041\034\001\002\000\016" +
    "\005\uffea\006\uffea\007\uffea\011\uffea\031\uffea\032\uffea\001" +
    "\002\000\010\006\047\011\045\032\046\001\002\000\016" +
    "\005\uffeb\006\uffeb\007\uffeb\011\uffeb\031\uffeb\032\uffeb\001" +
    "\002\000\012\010\042\017\035\035\037\041\034\001\002" +
    "\000\012\010\042\017\035\035\037\041\034\001\002\000" +
    "\012\005\ufff3\006\ufff3\011\ufff3\032\ufff3\001\002\000\012" +
    "\005\ufff2\006\ufff2\011\ufff2\032\ufff2\001\002\000\004\020" +
    "\053\001\002\000\010\002\ufffa\014\ufffa\016\ufffa\001\002" +
    "\000\004\010\055\001\002\000\004\005\056\001\002\000" +
    "\004\017\057\001\002\000\004\005\060\001\002\000\004" +
    "\011\061\001\002\000\016\005\uffe6\006\uffe6\007\uffe6\011" +
    "\uffe6\031\uffe6\032\uffe6\001\002\000\014\010\042\011\063" +
    "\017\035\035\037\041\034\001\002\000\016\005\uffe7\006" +
    "\uffe7\007\uffe7\011\uffe7\031\uffe7\032\uffe7\001\002\000\006" +
    "\005\066\011\067\001\002\000\012\005\uffe5\006\047\011" +
    "\uffe5\032\046\001\002\000\004\022\070\001\002\000\016" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\031\uffe8\032\uffe8\001" +
    "\002\000\004\005\071\001\002\000\012\010\042\017\035" +
    "\035\037\041\034\001\002\000\012\005\uffe4\006\047\011" +
    "\uffe4\032\046\001\002\000\012\010\042\017\035\035\037" +
    "\041\034\001\002\000\012\010\042\017\035\035\037\041" +
    "\034\001\002\000\016\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\031\uffef\032\uffef\001\002\000\016\005\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\031\ufff0\032\ufff0\001\002\000\004\002\ufffe" +
    "\001\002\000\004\010\101\001\002\000\006\011\uffe0\015" +
    "\103\001\002\000\004\011\107\001\002\000\004\017\104" +
    "\001\002\000\006\011\uffe2\022\105\001\002\000\006\011" +
    "\uffe0\015\103\001\002\000\004\011\uffe1\001\002\000\004" +
    "\033\110\001\002\000\004\033\111\001\002\000\004\005" +
    "\114\001\002\000\004\034\113\001\002\000\010\002\uffe3" +
    "\014\uffe3\016\uffe3\001\002\000\002\001\002\000\004\020" +
    "\121\001\002\000\004\005\117\001\002\000\004\034\120" +
    "\001\002\000\004\034\uffde\001\002\000\004\005\uffdc\001" +
    "\002\000\004\005\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\016\007\017\006\026\004\001\001\000" +
    "\002\001\001\000\010\016\007\017\076\026\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\007\017" +
    "\010\026\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\040\021" +
    "\035\022\032\023\037\024\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\043\021\035\022\032\023\037\024\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\050\021\035\022\032\023\037\024\042\001\001\000" +
    "\014\003\047\021\035\022\032\023\037\024\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\064\021\035\022\032\023\037\024\042" +
    "\025\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\071\021\035\022\032\023\037\024" +
    "\042\001\001\000\002\001\001\000\012\021\035\022\075" +
    "\023\037\024\042\001\001\000\012\021\035\022\074\023" +
    "\037\024\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\114\006\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\114\006\121\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= fonction 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 progNoeud.ajouterUnFils((Noeud) f);
                     System.out.println("entered in Prog");
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= declGlobal 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= fonction prog 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 progNoeud.ajouterUnFils((Noeud) f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= declGlobal prog 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declGlobal ::= DECL SEP TYPE SEP NOM SEP FDL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
//		 if(tds.varGlobExist((String) n)){
//                                            throw new Exception("Erreur : ce varriable " + n + " existe déjà");
//                                         }else{
//                                            Symboles nsymbole = new VarSymbol((String) n, (String) t, VarSymbol.Categories.EGlobal );
//                                            tds.addSymbole(nsymbole);
//                                         }

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declGlobal",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declGlobal ::= DECL TYPE NOM SEP AFF SEP NUM SEP FDL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declGlobal",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declGlobal ::= DECL SEP TYPE SEP NOM SEP AFF SEP expression SEP FDL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declGlobal",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declLocal ::= DECL SEP TYPE SEP NOM SEP FDL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declLocal",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresBool ::= expression SEP SUP SEP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expresBool",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresBool ::= expression SEP INF SEP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expresBool",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresBool ::= expression SEP EG SEP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expresBool",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresBool ::= expression SEP SUPE SEP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expresBool",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresBool ::= expression SEP INFE SEP expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expresBool",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression ADD expression 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression SUB expression 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= terme 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // terme ::= terme MUL terme 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("terme",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // terme ::= terme DIV terme 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("terme",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // terme ::= facteur 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("terme",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // facteur ::= NUM 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // facteur ::= NOM 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // facteur ::= PO expression PF 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // facteur ::= appel 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // facteur ::= lecture 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // appel ::= NOM PO liste_arguments PF 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // appel ::= NOM PO PF 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lecture ::= LIRE SEP PO SEP NOM SEP PF 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lecture",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // liste_arguments ::= expression 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("liste_arguments",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // liste_arguments ::= liste_arguments SEP VIRG SEP expression 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("liste_arguments",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fonction ::= FUNCT TYPE PO functParam PF DEBUT bloc FIN 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functParam ::= TYPE NOM 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functParam",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functParam ::= TYPE NOM VIRG functParam 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functParam",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functParam ::= 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functParam",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // affectation ::= idf SEP AFF SEP expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloc ::= DEBUT SEP liste_instructions SEP FIN 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // liste_instructions ::= instruction FDL liste_instructions 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("liste_instructions",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // liste_instructions ::= instruction FDL 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("liste_instructions",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
